package com.hexaware.ecom.test;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import com.hexaware.ecom.entity.Product;
import com.hexaware.ecom.exceptions.ProductNotFoundException;
import com.hexaware.ecom.service.IProductService;
import com.hexaware.ecom.service.ProductServiceImp;

class ProductServiceImpTest {

    static IProductService productService;

    @BeforeAll
    public static void beforeAll() {
        productService = new ProductServiceImp(); // Instantiate service
    }

    @Test
    void testCreatePrdSuccess() {
        // Arrange: Create a sample product
        Product product = new Product(201, "Product1", 150, "Description", 10);

        // Act: Call the service's createPrd method
        boolean result = productService.createPrd(product);

        // Assert: Check if the product was created successfully
        assertTrue(result, "Product creation should be successful.");
    }

    @Test
    void testRemovePrdSuccess() {
        // Arrange: Create a sample product to remove
        Product product = new Product(202, "Product2", 100, "Description", 5);

        // Act: Call the service's removePrd method
        boolean result = productService.removePrd(product);

        // Assert: Check if the product was removed successfully
        assertTrue(result, "Product removal should be successful.");
    }

    @Test
    void testRemovePrdFailure() {
        // Arrange: Create a sample product with a non-existent product ID
        Product product = new Product(999, "InvalidProduct", 100, "Description", 5);

        // Act & Assert: Check if removing a non-existent product throws ProductNotFoundException
        ProductNotFoundException exception = assertThrows(ProductNotFoundException.class, () -> {
            productService.removePrd(product);
        }, "Expected ProductNotFoundException but didn't get one.");

        // Optionally log or assert the exception message
        System.out.println(exception.getMessage());
    }

    @Test
    void testValidatePrd() {
        // Arrange: Create a valid product
        Product validProduct = new Product(203, "ValidProduct", 200, "Valid Description", 10);

        // Act: Call the validatePrd method
        boolean isValid = ProductServiceImp.vaildatePrd(validProduct);

        // Assert: Check if the product is valid
        assertTrue(isValid, "Product validation should pass for a valid product.");
    }

    @Test
    void testValidatePrdFailure() {
        // Arrange: Create an invalid product
        Product invalidProduct = new Product(199, "P", 0, "Invalid", -5);

        // Act: Call the validatePrd method
        boolean isValid = ProductServiceImp.vaildatePrd(invalidProduct);

        // Assert: Check if the product validation fails for an invalid product
        assertTrue(!isValid, "Product validation should fail for an invalid product.");
    }
}
